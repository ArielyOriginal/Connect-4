<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connect Four Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@500;700&display=swap" rel="stylesheet">
    <style>
        /* Custom Styles based on Logo */
        body {
            font-family: 'Rubik', sans-serif;
            background-color: #f8f9fa; /* Lighter gray background */
        }
        /* Logo Colors */
        :root {
            --logo-green: #28a745; /* Approximate Green */
            --logo-yellow: #ffc107; /* Approximate Yellow */
            --logo-red: #dc3545; /* Approximate Red */
            --logo-blue: #007bff; /* Approximate Blue */
            --logo-dark-text: #343a40; /* Dark Gray for text */
            --card-bg: #e9ecef; /* Light gray for cards */
            --card-selected-bg: var(--logo-blue); /* Blue for selected */
            --card-selected-text: white;
        }

        .word-card {
            /* Styling for the word cards in the grid */
            transition: all 0.2s ease-in-out;
            cursor: pointer;
            user-select: none; /* Prevent text selection */
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
            border-radius: 0.5rem; /* rounded-lg */
            background-color: var(--card-bg);
            color: var(--logo-dark-text);
            font-weight: 500; /* Medium weight */
            display: flex; /* Use flexbox for centering */
            align-items: center; /* Center text vertically */
            justify-content: center; /* Center text horizontally */
            text-align: center; /* Ensure text is centered */
            padding: 1rem; /* p-4 */
            text-transform: uppercase; /* Match game style */
            font-size: 0.875rem; /* text-sm */
        }
        @media (min-width: 768px) { /* md breakpoint */
             .word-card {
                 font-size: 1rem; /* text-base */
                 padding: 1.25rem; /* p-5 */
             }
        }

        .word-card.selected {
            /* Style for selected cards */
            background-color: var(--card-selected-bg);
            color: var(--card-selected-text);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.12);
        }
        .solved-group {
            /* Style for the revealed group boxes */
            border-radius: 0.5rem; /* rounded-lg */
            padding: 1rem; /* p-4 */
            margin-bottom: 0.75rem; /* mb-3 */
            color: var(--logo-dark-text); /* Dark text for contrast on light bg */
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        /* Difficulty Colors Mapped from Logo */
        /* Applied to solved groups */
        /* Yellow (Easiest), Green, Blue, Red (Hardest) */
        .difficulty-0 { background-color: #fff3cd; border: 1px solid var(--logo-yellow); } /* Light Yellow */
        .difficulty-1 { background-color: #d4edda; border: 1px solid var(--logo-green); } /* Light Green */
        .difficulty-2 { background-color: #cce5ff; border: 1px solid var(--logo-blue); } /* Light Blue */
        .difficulty-3 { background-color: #f8d7da; border: 1px solid var(--logo-red); } /* Light Red */

        /* Button Styles */
        .btn {
            padding: 0.6rem 1.25rem; /* py-2.5 px-5 */
            border-radius: 9999px; /* Fully rounded */
            font-weight: 700; /* Bold */
            transition: all 0.2s ease-in-out;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: none;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .btn:hover {
             /* Subtle lift effect on hover */
             transform: translateY(-1px);
             box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .btn:disabled {
            /* Style for disabled buttons */
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        /* Button color variants based on logo */
        .btn-green { background-color: var(--logo-green); color: white; }
        .btn-yellow { background-color: var(--logo-yellow); color: var(--logo-dark-text); }
        .btn-blue { background-color: var(--logo-blue); color: white; }
        .btn-red { background-color: var(--logo-red); color: white; }
        .btn-gray { background-color: #6c757d; color: white; } /* Gray for less important actions */
        .btn-indigo { background-color: #6610f2; color: white; } /* A distinct color for submit (optional) */


        /* Message Box Styles */
        .message-box {
            /* Pop-up messages for feedback */
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem; /* rounded-lg */
            color: white;
            font-weight: 500;
            z-index: 100; /* Ensure it's above other elements */
            opacity: 0;
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            pointer-events: none; /* Allow clicks through when hidden */
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
            transform: translate(-50%, -20px); /* Start hidden above */
        }
        .message-box.show {
            /* Style when message is visible */
            opacity: 1;
            transform: translateX(-50%); /* Slide down into view */
        }
        /* Message box color variants */
        .message-box.success { background-color: var(--logo-green); }
        .message-box.error { background-color: var(--logo-red); }
        .message-box.info { background-color: var(--logo-blue); }

        /* Shake animation for incorrect guesses */
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
          20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        .shake {
          animation: shake 0.5s ease-in-out;
        }

        /* Hide element utility */
        .hidden {
            display: none;
        }

        /* Logo Image Style */
        .logo-image {
            display: block;
            margin-left: auto;
            margin-right: auto;
            margin-bottom: 1.5rem; /* mb-6 */
            max-width: 200px; /* Limit width */
            height: auto; /* Maintain aspect ratio */
        }

    </style>
</head>
<body class="bg-gray-100 flex flex-col items-center justify-center min-h-screen p-4">

    <div id="difficulty-selection" class="w-full max-w-md bg-white p-6 md:p-8 rounded-xl shadow-lg text-center">
         <img src="https://i.imgur.com/4MV5anA.png"
              alt="Connect Four Logo"
              class="logo-image"
              onerror="this.src='https://placehold.co/200x60/f8f9fa/343a40?text=Logo+Error'; this.onerror=null;" />
              <h2 class="text-xl md:text-2xl font-bold text-gray-700 mb-6">Choose Difficulty</h2>
        <div class="flex flex-col space-y-3">
            <button data-difficulty="easy" class="difficulty-button btn btn-green">Easy</button>
            <button data-difficulty="moderate" class="difficulty-button btn btn-yellow">Moderate</button>
            <button data-difficulty="advanced" class="difficulty-button btn btn-blue">Advanced</button>
            <button data-difficulty="super-advanced" class="difficulty-button btn btn-red">Super Advanced</button>
        </div>
    </div>

    <div id="game-container" class="w-full max-w-2xl bg-white p-6 md:p-8 rounded-xl shadow-lg hidden">
         <img src="https://i.imgur.com/4MV5anA.png"
              alt="Connect Four Logo"
              class="logo-image"
              onerror="this.src='https://placehold.co/200x60/f8f9fa/343a40?text=Logo+Error'; this.onerror=null;" />
              <p class="text-center text-gray-600 mb-6 text-lg">Find groups of four items that share something in common!</p>

        <div id="solved-groups" class="mb-6 space-y-3">
            </div>

        <div id="word-grid" class="grid grid-cols-4 gap-3 md:gap-4 mb-6">
            </div>

        <div class="flex justify-center items-center mb-6">
            <span class="mr-2 text-gray-700 font-medium text-lg">Mistakes remaining:</span>
            <div id="mistakes-counter" class="flex space-x-1.5">
                </div>
        </div>

        <div class="flex flex-col sm:flex-row justify-center gap-3 md:gap-4">
            <button id="shuffle-button" class="btn btn-gray">Shuffle</button>
            <button id="deselect-button" class="btn btn-gray">Deselect All</button>
            <button id="submit-button" class="btn btn-blue" disabled>Submit</button>
        </div>

         <div class="text-center mt-6">
             <button id="new-game-button" class="btn btn-green hidden">New Game / Change Difficulty</button>
        </div>
    </div>

    <div id="message-box" class="message-box"></div>

    <script>
        // --- Game Data ---
        // Defines the puzzles for each difficulty level.
        // Each puzzle has 4 groups, each group has a category name, 4 words, and a difficulty index (0-3).
        const puzzles = {
             easy: [
                { // Puzzle E1: Basic Categories
                    groups: [
                        { category: "Colors", words: ["RED", "BLUE", "GREEN", "YELLOW"], difficulty: 0 },
                        { category: "Fruits", words: ["APPLE", "BANANA", "ORANGE", "GRAPE"], difficulty: 1 },
                        { category: "Common Pets", words: ["DOG", "CAT", "BIRD", "FISH"], difficulty: 2 },
                        { category: "Basic Shapes", words: ["CIRCLE", "SQUARE", "TRIANGLE", "STAR"], difficulty: 3 }
                    ]
                },
                { // Puzzle E2: Everyday Things
                    groups: [
                        { category: "Weather Conditions", words: ["SUNNY", "RAINY", "CLOUDY", "WINDY"], difficulty: 0 },
                        { category: "Types of Furniture", words: ["CHAIR", "TABLE", "SOFA", "BED"], difficulty: 1 },
                        { category: "Beverages", words: ["WATER", "JUICE", "MILK", "SODA"], difficulty: 2 },
                        { category: "Items of Clothing", words: ["SHIRT", "PANTS", "HAT", "SHOES"], difficulty: 3 }
                    ]
                },
                 { // Puzzle E3: School & Home
                    groups: [
                        { category: "School Subjects", words: ["MATH", "SCIENCE", "HISTORY", "ENGLISH"], difficulty: 0 },
                        { category: "Musical Instruments", words: ["PIANO", "GUITAR", "DRUMS", "VIOLIN"], difficulty: 1 },
                        { category: "Parts of the Body", words: ["HEAD", "ARM", "LEG", "FOOT"], difficulty: 2 },
                        { category: "Kitchen Utensils", words: ["FORK", "SPOON", "KNIFE", "PLATE"], difficulty: 3 }
                    ]
                }
            ],
            moderate: [
                { // Puzzle M1: More Abstract
                    groups: [
                        { category: "Things with Rings", words: ["PLANET", "TREE", "ONION", "TARGET"], difficulty: 0 },
                        { category: "Units of Time", words: ["SECOND", "MINUTE", "HOUR", "DAY"], difficulty: 1 },
                        { category: "Types of Pasta", words: ["SPAGHETTI", "PENNE", "FUSILLI", "LASAGNA"], difficulty: 2 },
                        { category: "Dog Commands", words: ["SIT", "STAY", "FETCH", "HEEL"], difficulty: 3 }
                    ]
                },
                { // Puzzle M2: Verbs & Nouns
                    groups: [
                        { category: "Ways to Say 'Hello'", words: ["HI", "HEY", "GREETINGS", "SALUTATIONS"], difficulty: 0 },
                        { category: "Things That Are Cold", words: ["ICE", "SNOW", "FREEZER", "POPSICLE"], difficulty: 1 },
                        { category: "Board Games", words: ["CHESS", "CHECKERS", "MONOPOLY", "SCRABBLE"], difficulty: 2 },
                        { category: "Things With Keys", words: ["CAR", "DOOR", "PIANO", "COMPUTER"], difficulty: 3 }
                    ]
                },
                 { // Puzzle M3: Concepts
                    groups: [
                        { category: "Things That Fly", words: ["PLANE", "BIRD", "KITE", "DRONE"], difficulty: 0 },
                        { category: "Types of Dance", words: ["BALLET", "HIP-HOP", "SALSA", "TAP"], difficulty: 1 },
                        { category: "Things That Are Round", words: ["BALL", "MOON", "PIZZA", "CLOCK"], difficulty: 2 },
                        { category: "Card Games", words: ["POKER", "BRIDGE", "SOLITAIRE", "UNO"], difficulty: 3 }
                    ]
                }
            ],
            advanced: [
                { // Puzzle A1: Tricky Connections
                    groups: [
                        { category: "Palindromes", words: ["LEVEL", "RACECAR", "MADAM", "KAYAK"], difficulty: 0 },
                        { category: "Starts with 'S'", words: ["SUN", "STAR", "SPIDER", "SNAKE"], difficulty: 1 }, // Red herring potential
                        { category: "Things Found in a Forest", words: ["TREE", "MUSHROOM", "DEER", "PATH"], difficulty: 2 },
                        { category: "Words ending in 'ING'", words: ["SINGING", "RUNNING", "SWIMMING", "READING"], difficulty: 3 }
                    ]
                },
                { // Puzzle A2: Overlapping Concepts
                    groups: [
                        { category: "Types of Cheese", words: ["CHEDDAR", "MOZZARELLA", "BRIE", "FETA"], difficulty: 0 },
                        { category: "Mythological Creatures", words: ["DRAGON", "UNICORN", "GRIFFIN", "PHOENIX"], difficulty: 1 },
                        { category: "Things with Wings", words: ["ANGEL", "AIRPLANE", "BAT", "BUILDING"], difficulty: 2 }, // Tricky: Building wing
                        { category: "Currencies", words: ["DOLLAR", "EURO", "YEN", "POUND"], difficulty: 3 }
                    ]
                },
                 { // Puzzle A3: Subtle Links
                    groups: [
                        { category: "Things That Are Sharp", words: ["NEEDLE", "BLADE", "WIT", "TASTE"], difficulty: 0 }, // Abstract sharpness
                        { category: "Olympic Sports", words: ["SWIMMING", "GYMNASTICS", "TRACK", "FENCING"], difficulty: 1 },
                        { category: "Types of Bread", words: ["BAGUETTE", "SOURDOUGH", "RYE", "PUMPERNICKEL"], difficulty: 2 },
                        { category: "Words Associated with Music", words: ["NOTE", "SCALE", "CHORD", "TEMPO"], difficulty: 3 }
                    ]
                }
            ],
            'super-advanced': [
                 { // Puzzle SA1: Wordplay & Obscure
                    groups: [
                        { category: "Homophones of Numbers", words: ["WON", "TOO", "FOR", "ATE"], difficulty: 0 },
                        { category: "Starting with Roman Numerals", words: ["IVORY", "VIDEO", "MIX", "LUCKY"], difficulty: 1 }, // IV, VI, IX, L
                        { category: "Types of Knots", words: ["BOWLINE", "CLOVE", "REEF", "SHEET"], difficulty: 2 },
                        { category: "Words Containing 'ART'", words: ["START", "CARTON", "QUARTER", "MARTINI"], difficulty: 3 }
                    ]
                },
                { // Puzzle SA2: Highly Specific / Niche
                    groups: [
                        { category: "Chess Pieces (minus King)", words: ["QUEEN", "ROOK", "BISHOP", "KNIGHT"], difficulty: 0 }, // Pawn might be too obvious
                        { category: "Programming Languages", words: ["PYTHON", "JAVA", "SWIFT", "RUBY"], difficulty: 1 },
                        { category: "Chemical Elements (Symbols)", words: ["TIN", "IRON", "LEAD", "GOLD"], difficulty: 2 }, // Sn, Fe, Pb, Au
                        { category: "Words with Silent 'B'", words: ["DOUBT", "SUBTLE", "THUMB", "COMB"], difficulty: 3 }
                    ]
                },
                 { // Puzzle SA3: Multiple Meanings / Red Herrings
                    groups: [
                        { category: "Things That Can Be 'Broken'", words: ["RECORD", "HEART", "PROMISE", "NEWS"], difficulty: 0 },
                        { category: "Types of Bears", words: ["GRIZZLY", "POLAR", "PANDA", "BLACK"], difficulty: 1 }, // Panda is technically a bear
                        { category: "Words Related to Gambling", words: ["BET", "CHIP", "POT", "ANTE"], difficulty: 2 },
                        { category: "Things with 'Hands'", words: ["CLOCK", "PLAYER", "FARM", "APPLAUSE"], difficulty: 3 } // Clock hands, poker player, farm hand, round of applause
                    ]
                }
            ]
        };

        // --- DOM Elements ---
        // Get references to the HTML elements the script needs to interact with.
        const difficultySelectionScreen = document.getElementById('difficulty-selection');
        const gameContainer = document.getElementById('game-container');
        const wordGrid = document.getElementById('word-grid');
        const solvedGroupsContainer = document.getElementById('solved-groups');
        const mistakesCounter = document.getElementById('mistakes-counter');
        const shuffleButton = document.getElementById('shuffle-button');
        const deselectButton = document.getElementById('deselect-button');
        const submitButton = document.getElementById('submit-button');
        const newGameButton = document.getElementById('new-game-button');
        const messageBox = document.getElementById('message-box');
        const difficultyButtons = document.querySelectorAll('.difficulty-button');

        // --- Game State Variables ---
        let currentPuzzle; // Holds the data for the currently active puzzle
        let currentDifficulty; // Stores the selected difficulty level ('easy', 'moderate', etc.)
        let wordsInGrid = []; // Array of words currently displayed on the grid
        let selectedWords = []; // Array of words the user has currently selected
        let mistakesRemaining; // Counter for remaining guesses
        let solvedGroups = []; // Array to store the groups the user has correctly identified
        const MAX_MISTAKES = 4; // Maximum allowed incorrect guesses
        // Maps difficulty index (0-3) to the corresponding CSS class for solved group styling
        const difficultyColors = [
            'difficulty-0', // Yellow - Easiest
            'difficulty-1', // Green
            'difficulty-2', // Blue
            'difficulty-3'  // Red - Hardest
        ];
        const LOGO_BLUE = '#007bff'; // Store logo blue color for mistake dots

        // --- Game Logic Functions ---

        /** Shows the difficulty selection screen and hides the game container */
        function showDifficultySelection() {
            gameContainer.classList.add('hidden'); // Hide game
            difficultySelectionScreen.classList.remove('hidden'); // Show difficulty selection
            newGameButton.classList.add('hidden'); // Hide the 'New Game' button
            // Clear any leftover messages
            messageBox.textContent = '';
            messageBox.className = 'message-box';
        }

        /** Starts the game with the selected difficulty */
        function startGame(difficulty) {
            currentDifficulty = difficulty; // Store the chosen difficulty
            difficultySelectionScreen.classList.add('hidden'); // Hide difficulty selection
            gameContainer.classList.remove('hidden'); // Show the main game container
            initGame(difficulty); // Initialize the game board and state
        }

        /** Initializes a new game for the chosen difficulty */
        function initGame(difficulty) {
            // Reset game state variables
            selectedWords = [];
            solvedGroups = [];
            mistakesRemaining = MAX_MISTAKES;

            // Clear dynamic elements
            wordGrid.innerHTML = '';
            solvedGroupsContainer.innerHTML = '';
            messageBox.textContent = '';
            messageBox.className = 'message-box';

            // Reset button states
            submitButton.disabled = true;
            shuffleButton.disabled = false;
            deselectButton.disabled = false;
            newGameButton.classList.add('hidden');

            // Select a random puzzle from the chosen difficulty level
            const availablePuzzles = puzzles[difficulty];
            // Error handling if no puzzles exist for the selected difficulty
            if (!availablePuzzles || availablePuzzles.length === 0) {
                 console.error(`No puzzles found for difficulty: ${difficulty}`);
                 showMessage(`No puzzles available for ${difficulty}. Starting Easy.`, 'error', 4000);
                 startGame('easy'); // Default to easy
                 return;
            }
            const puzzleIndex = Math.floor(Math.random() * availablePuzzles.length);
            currentPuzzle = availablePuzzles[puzzleIndex];

            // Error handling if the selected puzzle data is invalid
            if (!currentPuzzle || !currentPuzzle.groups) {
                console.error(`Selected puzzle for difficulty ${difficulty} is invalid:`, currentPuzzle);
                showMessage(`Error loading puzzle. Please try again or choose another difficulty.`, 'error', 5000);
                showDifficultySelection(); // Go back to difficulty selection
                return;
            }

            // Get all words from the selected puzzle and shuffle them
            wordsInGrid = currentPuzzle.groups.flatMap(group => group.words);
            shuffleArray(wordsInGrid); // Randomize word order

            // Render the game elements
            renderWordGrid();
            updateMistakesDisplay();
        }

        /** Renders the word cards onto the grid */
        function renderWordGrid() {
            wordGrid.innerHTML = ''; // Clear previous cards
            wordsInGrid.forEach(word => {
                const card = document.createElement('div');
                card.textContent = word;
                // Apply base card style and other necessary classes
                card.classList.add('word-card');
                card.dataset.word = word; // Store the word itself in a data attribute
                card.addEventListener('click', handleWordClick); // Add click listener
                wordGrid.appendChild(card);
            });
            // Adjust grid rows based on the number of words remaining
            wordGrid.style.gridTemplateRows = `repeat(${Math.ceil(wordsInGrid.length / 4)}, minmax(0, 1fr))`;
        }

        /** Handles clicking on a word card */
        function handleWordClick(event) {
            if (isGameOver()) return; // Ignore clicks if game is over
            // Use closest to ensure we target the card div even if the click is on the text inside
            const card = event.target.closest('.word-card');
            if (!card) return; // Exit if click wasn't on a card element

            const word = card.dataset.word;

            // Toggle selection state
            if (selectedWords.includes(word)) {
                // Deselect word
                selectedWords = selectedWords.filter(w => w !== word);
                card.classList.remove('selected');
            } else {
                // Select word (only if less than 4 are already selected)
                if (selectedWords.length < 4) {
                    selectedWords.push(word);
                    card.classList.add('selected');
                }
            }
            // Enable submit button only when exactly 4 words are selected
            submitButton.disabled = selectedWords.length !== 4;
        }

        /** Handles the submit button click */
        function handleSubmit() {
            if (selectedWords.length !== 4 || isGameOver()) return; // Double-check conditions

            const correctGroup = findCorrectGroup(selectedWords); // Check if the selection matches a group

            if (correctGroup) {
                showMessage('Correct!', 'success'); // Show success message
                handleCorrectGuess(correctGroup); // Process the correct guess
            } else {
                 handleIncorrectGuess(); // Process the incorrect guess
            }
        }

        /** Processes a correct guess */
        function handleCorrectGuess(group) {
            solvedGroups.push(group); // Add the correctly guessed group to the solved list
            // Sort solved groups by their difficulty index for consistent display order
            solvedGroups.sort((a, b) => a.difficulty - b.difficulty);

            // Remove the guessed words from the grid array
            wordsInGrid = wordsInGrid.filter(word => !group.words.includes(word));
            selectedWords = []; // Clear the current selection

            // Update the UI
            renderSolvedGroups(); // Display the newly solved group
            renderWordGrid(); // Re-render the grid with remaining words
            submitButton.disabled = true; // Disable submit button after a guess

            // Check if all groups have been solved
            if (wordsInGrid.length === 0) {
                handleWin(); // Trigger win condition
            }
        }

        /** Processes an incorrect guess */
        function handleIncorrectGuess() {
             showMessage('Incorrect Group', 'error'); // Show error message
             mistakesRemaining--; // Decrement mistakes counter
             updateMistakesDisplay(); // Update the visual counter

             // Add shake animation to the selected cards for visual feedback
             const selectedCards = document.querySelectorAll('.word-card.selected');
             selectedCards.forEach(card => {
                 card.classList.add('shake');
                 // Remove the shake class after the animation finishes
                 card.addEventListener('animationend', () => card.classList.remove('shake'), { once: true });
             });

             // Check if the player is out of mistakes
             if (mistakesRemaining === 0) {
                 handleLoss(); // Trigger loss condition
             } else {
                 // Automatically deselect words after a short delay (to see the shake)
                 setTimeout(() => {
                     deselectAllWords();
                 }, 500); // 0.5 second delay
             }
        }

        /** Renders the solved groups area */
        function renderSolvedGroups() {
            solvedGroupsContainer.innerHTML = ''; // Clear previous solved groups
            solvedGroups.forEach(group => {
                const groupDiv = document.createElement('div');
                // Apply the base class and the specific difficulty color class
                groupDiv.classList.add('solved-group', difficultyColors[group.difficulty]);

                // Create and add the category name
                const categoryP = document.createElement('p');
                categoryP.textContent = group.category;
                categoryP.classList.add('font-bold', 'text-lg', 'mb-1');

                // Create and add the list of words in the group
                const wordsP = document.createElement('p');
                wordsP.textContent = group.words.join(', ');
                wordsP.classList.add('font-medium', 'uppercase');

                groupDiv.appendChild(categoryP);
                groupDiv.appendChild(wordsP);
                solvedGroupsContainer.appendChild(groupDiv); // Add the group div to the container
            });
        }

        /** Updates the mistakes counter display (dots) */
        function updateMistakesDisplay() {
            mistakesCounter.innerHTML = ''; // Clear previous dots
            for (let i = 0; i < MAX_MISTAKES; i++) {
                const dot = document.createElement('span');
                dot.classList.add('h-4', 'w-4', 'rounded-full'); // Style the dot
                if (i < mistakesRemaining) {
                    // Active mistake dot (using logo blue)
                    dot.style.backgroundColor = LOGO_BLUE;
                } else {
                    // Used mistake dot (gray)
                    dot.classList.add('bg-gray-300');
                }
                mistakesCounter.appendChild(dot); // Add the dot to the counter
            }
        }

        /** Finds the group definition if the selected words match an unsolved group */
        function findCorrectGroup(selection) {
             if (!currentPuzzle || !currentPuzzle.groups) return null; // Safety check
             // Sort the user's selection for comparison
             const sortedSelection = [...selection].sort();
             // Find a group in the puzzle data that matches
             return currentPuzzle.groups.find(group => {
                // Check if this group has already been solved
                const groupAlreadySolved = solvedGroups.some(sg => sg.category === group.category);
                if (groupAlreadySolved) return false; // Skip if already solved

                // Sort the words in the potential group for comparison
                const sortedGroupWords = [...group.words].sort();
                // Check if lengths match and the sorted word lists are identical
                return selection.length === group.words.length &&
                       sortedSelection.toString() === sortedGroupWords.toString();
            });
        }

        /** Shuffles the words currently in the grid */
        function shuffleWordsInGrid() {
             if (isGameOver()) return; // Don't shuffle if game is over
             shuffleArray(wordsInGrid); // Shuffle the underlying array
             deselectAllWords(); // Deselect any selected words
             renderWordGrid(); // Re-render the grid with shuffled words
             showMessage('Words shuffled!', 'info'); // Notify the user
        }

        /** Deselects all currently selected words */
        function deselectAllWords() {
             if (isGameOver()) return; // Don't deselect if game is over
             selectedWords = []; // Clear the selection array
             // Remove the 'selected' class from all word cards
             const selectedCards = document.querySelectorAll('.word-card.selected');
             selectedCards.forEach(card => card.classList.remove('selected'));
             submitButton.disabled = true; // Disable submit button
        }

        /** Handles the win condition */
        function handleWin() {
            showMessage('Congratulations! You found all connections!', 'success', 5000); // Show win message
            endGame(); // Perform common end-game actions
        }

        /** Handles the lose condition */
        function handleLoss() {
            showMessage('Out of mistakes! Better luck next time.', 'error', 5000); // Show lose message
            revealRemainingGroups(); // Show the answers for unsolved groups
            endGame(); // Perform common end-game actions
        }

        /** Reveals all unsolved groups when the game is lost */
        function revealRemainingGroups() {
            if (!currentPuzzle || !currentPuzzle.groups) return; // Safety check
            // Find groups that are not already in the solvedGroups array
            const remainingGroups = currentPuzzle.groups.filter(
                group => !solvedGroups.some(sg => sg.category === group.category)
            );
            // Add the remaining groups to the solvedGroups array to display them
            remainingGroups.forEach(group => { solvedGroups.push(group); });
            // Re-sort and re-render the solved groups area to include the revealed answers
            solvedGroups.sort((a, b) => a.difficulty - b.difficulty);
            renderSolvedGroups();
            wordGrid.innerHTML = ''; // Clear the word grid as the game is over
        }

        /** Common actions to perform when the game ends (win or lose) */
        function endGame() {
            // Disable game interaction buttons
            submitButton.disabled = true;
            shuffleButton.disabled = true;
            deselectButton.disabled = true;
            // Remove click listeners from any remaining word cards
            const remainingCards = wordGrid.querySelectorAll('.word-card');
            remainingCards.forEach(card => card.removeEventListener('click', handleWordClick));
            // Show the 'New Game / Change Difficulty' button
            newGameButton.classList.remove('hidden');
        }

        /** Checks if the game is over (no mistakes left or all groups solved) */
        function isGameOver() {
            return mistakesRemaining === 0 || wordsInGrid.length === 0;
        }

        /** Displays a temporary message to the user */
        function showMessage(text, type = 'info', duration = 2500) {
            messageBox.textContent = text; // Set message text
            // Reset classes and apply the type class (success, error, info)
            messageBox.className = 'message-box';
            messageBox.classList.add(type);
            messageBox.classList.add('show'); // Make the message box visible

            // Clear any existing timeout to prevent overlapping messages
            if (messageBox.timeoutId) clearTimeout(messageBox.timeoutId);
            // Set a timeout to hide the message box after the specified duration
            messageBox.timeoutId = setTimeout(() => {
                messageBox.classList.remove('show');
                messageBox.timeoutId = null; // Clear the timeout ID reference
            }, duration);
        }

        /** Shuffles an array in place (Fisher-Yates algorithm) */
        function shuffleArray(array) {
            // Loop backwards through the array
            for (let i = array.length - 1; i > 0; i--) {
                // Pick a random index from 0 to i
                const j = Math.floor(Math.random() * (i + 1));
                // Swap the elements at index i and j
                [array[i], array[j]] = [array[j], array[i]];
            }
        }


        // --- Event Listeners ---
        // Assign functions to button clicks
        shuffleButton.addEventListener('click', shuffleWordsInGrid);
        deselectButton.addEventListener('click', deselectAllWords);
        submitButton.addEventListener('click', handleSubmit);
        newGameButton.addEventListener('click', showDifficultySelection); // Takes user back to difficulty screen
        // Add listeners for all difficulty buttons
        difficultyButtons.forEach(button => {
            button.addEventListener('click', (event) => {
                // Start the game with the difficulty stored in the button's data attribute
                startGame(event.target.dataset.difficulty);
            });
        });

        // --- Initial Load ---
        // When the window finishes loading, show the difficulty selection screen first.
        window.onload = showDifficultySelection;

    </script>

</body>
</html>
